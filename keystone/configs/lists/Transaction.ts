import { list } from "@keystone-6/core";
import { allowAll } from "@keystone-6/core/access";
import {
  text,
  relationship,
  timestamp,
  checkbox,
  calendarDay,
  decimal,
} from "@keystone-6/core/fields";

import { isAdmin, isOwner, isUser } from "../roles";

import { pubsub } from "../../common/pubsub";

export const Entry = list({
  access: {
    operation: allowAll,
    filter: {
      query: ({ session, context, listKey, operation }) => {
        //console.log(session)

        // for debugging, this essentially turns of access control
        //return true

        if (isAdmin({ session })) {
          return true;
        }

        if (isOwner({ session })) {
          return {
            owner: {
              id: {
                equals: session?.data.organization.id,
              },
            }, // TODO: add support for mutliple orgs
          };
        }

        return false;
      },
    },
  },
  fields: {
    createdAt: timestamp({
      defaultValue: { kind: "now" },
      validation: { isRequired: true },
      ui: {
        createView: {
          fieldMode: "hidden",
        },
      },
    }),

    createdBy: relationship({
      ref: "User",
      ui: {
        hideCreate: true,
      },
    }),

    owner: relationship({
      ref: "Organization",
      ui: {
        hideCreate: true,
      },
    }),

    accountingPeriod: relationship({
      ref: "AccountingPeriod",
    }),

    date: calendarDay({
      label: "Transaction Date",
    }),

    description: text(),

    amount: decimal({
      scale: 2,
    }),

    counterparty: text(),
    reference: text(),
    message: text(),

    attachments: relationship({
      ref: "Attachment",
      many: true,
    }),

    invoice: relationship({
      ref: "Invoice",
      many: false,
    }),

    entry: relationship({
      ref: "Entry",
      many: false,
    }),

    // true if invoice is generated by the assistant
    isGenerated: checkbox({ defaultValue: false }),

    verification: relationship({
      ref: "TransactionVerification",
      many: false,
    }),
  },
  ui: {
    label: "Journal",
    listView: {
      initialColumns: [
        "entryNumber",
        "date",
        "description",
        "accountingPeriod",
      ],
    },
  },
  graphql: {
    plural: "entrys", // we need to rename this from entries -> entrys for react-admins gql introsepction package
  },
  hooks: {
    afterOperation: async ({ operation, item }) => {
      if (operation === "update") {
        console.log(item);
        await pubsub.publish("ENTRY_CHANGED", { entryChanged: item });
      }
    },
  },
});
