import { list } from '@keystone-6/core';
import { allowAll } from '@keystone-6/core/access';
import {
  text,
  relationship,
  timestamp,
  integer,
  calendarDay,
  decimal,
  select,
  checkbox

} from '@keystone-6/core/fields';

import { isAdmin, isOwner, isUser } from '../roles';
import { augmentContext } from '../../context';

export const Invoice = list({
    access: {
      operation: allowAll,
      filter: {
        query: ({ session, context, listKey, operation }) => {
          
          //console.log(session)


          // for debugging, this essentially turns of access control
          //return true

          if (isAdmin({session})) {
            return true
          }

          if (isOwner({session}))  {

            return {
              owner: {
                id: {
                  equals: session?.data.organization.id}} // TODO: add support for mutliple orgs
                }
          } 

          return false

        }
      }
    },
    fields: {
        createdAt: timestamp({
            defaultValue: { kind: 'now' },
            validation: { isRequired: true },
            ui: { 
            createView: {
                fieldMode: "hidden" 
            } 
            }
        }),

        createdBy: relationship({
            ref: "User",
            ui: {
            hideCreate: true,
            }
        }),

        owner: relationship({
            ref: "Organization",
            ui: {
            hideCreate: true,
            }
        }),      

        accountingPeriod: relationship({
            ref: "AccountingPeriod"
        }),      

        date: calendarDay({
            label: "Transaction Date",
        }),

        type: select({
            options: [
                { label: 'Outgoing', value: 'outgoing' },
                { label: 'Incoming', value: 'incoming' },
            ],
            validation: { isRequired: true },
        }),

        description: text(),

        invoiceNumber: text(),

        totalAmount: decimal({
            scale: 2,
            //defaultValue: "0",
        }),

        vatAmount: decimal({
            scale: 2,
            //defaultValue: "0",
        }),

        attachments: relationship({ 
            ref: 'Attachment', 
            many: true 
        }),

        entry: relationship({ 
            ref: 'Entry', 
            many: false 
        }),

        isPaid: checkbox({ defaultValue: false }),

        // true if invoice is generated by the assistant
        isGenerated: checkbox({ defaultValue: false }),


    },
    ui: {
      label: "Invoice",
      listView: {
        initialColumns: ["invoiceNumber", "date", "description","accountingPeriod"]
      }
    },
    hooks: {
      afterOperation: async ({ item, context, operation, inputData, originalItem }) => {

        console.log("Invoice afterOperation hook", item.userId, item)

        const ctx = augmentContext(context)
        const channelName =`ON_INVOICE:${item?.createdById}`
        await ctx.pubsub.publish(channelName, { onInvoice: {...item} })

        /*
        if (operation === 'update') {
          console.log(item)
          await pubsub.publish('INVOICE_UPDATE', { updatedInvoice: item });
        }
          */
      },
    },
  })