# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  role: String
  organizations(where: OrganizationWhereInput! = {}, orderBy: [OrganizationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationWhereUniqueInput): [Organization!]
  organizationsCount(where: OrganizationWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  role: StringFilter
  organizations: OrganizationManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input OrganizationManyRelationFilter {
  every: OrganizationWhereInput
  some: OrganizationWhereInput
  none: OrganizationWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  role: String
  organizations: OrganizationRelateToManyForUpdateInput
}

input OrganizationRelateToManyForUpdateInput {
  disconnect: [OrganizationWhereUniqueInput!]
  set: [OrganizationWhereUniqueInput!]
  create: [OrganizationCreateInput!]
  connect: [OrganizationWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  role: String
  organizations: OrganizationRelateToManyForCreateInput
}

input OrganizationRelateToManyForCreateInput {
  create: [OrganizationCreateInput!]
  connect: [OrganizationWhereUniqueInput!]
}

type Entry {
  id: ID!
  createdAt: DateTime
  createdBy: User
  owner: Organization
  date: CalendarDay
  entryNumber: Int
  description: String
  lineItems(where: LineItemWhereInput! = {}, orderBy: [LineItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LineItemWhereUniqueInput): [LineItem!]
  lineItemsCount(where: LineItemWhereInput! = {}): Int
  attachments(where: AttachmentWhereInput! = {}, orderBy: [AttachmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttachmentWhereUniqueInput): [Attachment!]
  attachmentsCount(where: AttachmentWhereInput! = {}): Int
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input EntryWhereUniqueInput {
  id: ID
}

input EntryWhereInput {
  AND: [EntryWhereInput!]
  OR: [EntryWhereInput!]
  NOT: [EntryWhereInput!]
  id: IDFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  owner: OrganizationWhereInput
  date: CalendarDayFilter
  entryNumber: IntFilter
  description: StringFilter
  lineItems: LineItemManyRelationFilter
  attachments: AttachmentManyRelationFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input LineItemManyRelationFilter {
  every: LineItemWhereInput
  some: LineItemWhereInput
  none: LineItemWhereInput
}

input AttachmentManyRelationFilter {
  every: AttachmentWhereInput
  some: AttachmentWhereInput
  none: AttachmentWhereInput
}

input EntryOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  date: OrderDirection
  entryNumber: OrderDirection
  description: OrderDirection
}

input EntryUpdateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  owner: OrganizationRelateToOneForUpdateInput
  date: CalendarDay
  entryNumber: Int
  description: String
  lineItems: LineItemRelateToManyForUpdateInput
  attachments: AttachmentRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input OrganizationRelateToOneForUpdateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
}

input LineItemRelateToManyForUpdateInput {
  disconnect: [LineItemWhereUniqueInput!]
  set: [LineItemWhereUniqueInput!]
  create: [LineItemCreateInput!]
  connect: [LineItemWhereUniqueInput!]
}

input AttachmentRelateToManyForUpdateInput {
  disconnect: [AttachmentWhereUniqueInput!]
  set: [AttachmentWhereUniqueInput!]
  create: [AttachmentCreateInput!]
  connect: [AttachmentWhereUniqueInput!]
}

input EntryUpdateArgs {
  where: EntryWhereUniqueInput!
  data: EntryUpdateInput!
}

input EntryCreateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  owner: OrganizationRelateToOneForCreateInput
  date: CalendarDay
  entryNumber: Int
  description: String
  lineItems: LineItemRelateToManyForCreateInput
  attachments: AttachmentRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input OrganizationRelateToOneForCreateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
}

input LineItemRelateToManyForCreateInput {
  create: [LineItemCreateInput!]
  connect: [LineItemWhereUniqueInput!]
}

input AttachmentRelateToManyForCreateInput {
  create: [AttachmentCreateInput!]
  connect: [AttachmentWhereUniqueInput!]
}

type LineItem {
  id: ID!
  createdAt: DateTime
  createdBy: User
  owner: Organization
  date: CalendarDay
  account: Account
  type: String
  amount: Decimal
  description: String
}

scalar Decimal

input LineItemWhereUniqueInput {
  id: ID
}

input LineItemWhereInput {
  AND: [LineItemWhereInput!]
  OR: [LineItemWhereInput!]
  NOT: [LineItemWhereInput!]
  id: IDFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  owner: OrganizationWhereInput
  date: CalendarDayNullableFilter
  account: AccountWhereInput
  type: StringFilter
  amount: DecimalFilter
  description: StringFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input LineItemOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  date: OrderDirection
  type: OrderDirection
  amount: OrderDirection
  description: OrderDirection
}

input LineItemUpdateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  owner: OrganizationRelateToOneForUpdateInput
  date: CalendarDay
  account: AccountRelateToOneForUpdateInput
  type: String
  amount: Decimal
  description: String
}

input AccountRelateToOneForUpdateInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
  disconnect: Boolean
}

input LineItemUpdateArgs {
  where: LineItemWhereUniqueInput!
  data: LineItemUpdateInput!
}

input LineItemCreateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  owner: OrganizationRelateToOneForCreateInput
  date: CalendarDay
  account: AccountRelateToOneForCreateInput
  type: String
  amount: Decimal
  description: String
}

input AccountRelateToOneForCreateInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
}

type Attachment {
  id: ID!
  name: String
  description: String
  file: FileFieldOutput
  ocrData: Attachment_ocrData_Document
  inferredData: String
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

type Attachment_ocrData_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AttachmentWhereUniqueInput {
  id: ID
}

input AttachmentWhereInput {
  AND: [AttachmentWhereInput!]
  OR: [AttachmentWhereInput!]
  NOT: [AttachmentWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  inferredData: StringFilter
}

input AttachmentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  inferredData: OrderDirection
}

input AttachmentUpdateInput {
  name: String
  description: String
  file: FileFieldInput
  ocrData: JSON
  inferredData: String
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AttachmentUpdateArgs {
  where: AttachmentWhereUniqueInput!
  data: AttachmentUpdateInput!
}

input AttachmentCreateInput {
  name: String
  description: String
  file: FileFieldInput
  ocrData: JSON
  inferredData: String
}

type AccountChart {
  id: ID!
  name: String
  description: String
  accounts(where: AccountWhereInput! = {}, orderBy: [AccountOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountWhereUniqueInput): [Account!]
  accountsCount(where: AccountWhereInput! = {}): Int
}

input AccountChartWhereUniqueInput {
  id: ID
}

input AccountChartWhereInput {
  AND: [AccountChartWhereInput!]
  OR: [AccountChartWhereInput!]
  NOT: [AccountChartWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  accounts: AccountManyRelationFilter
}

input AccountManyRelationFilter {
  every: AccountWhereInput
  some: AccountWhereInput
  none: AccountWhereInput
}

input AccountChartOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input AccountChartUpdateInput {
  name: String
  description: String
  accounts: AccountRelateToManyForUpdateInput
}

input AccountRelateToManyForUpdateInput {
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  create: [AccountCreateInput!]
  connect: [AccountWhereUniqueInput!]
}

input AccountChartUpdateArgs {
  where: AccountChartWhereUniqueInput!
  data: AccountChartUpdateInput!
}

input AccountChartCreateInput {
  name: String
  description: String
  accounts: AccountRelateToManyForCreateInput
}

input AccountRelateToManyForCreateInput {
  create: [AccountCreateInput!]
  connect: [AccountWhereUniqueInput!]
}

type Account {
  id: ID!
  account: Int
  name: String
  description: String
  type: String
  vatAmount: Decimal
  vatAccount: Account
}

input AccountWhereUniqueInput {
  id: ID
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IDFilter
  account: IntNullableFilter
  name: StringFilter
  description: StringFilter
  type: StringFilter
  vatAmount: DecimalNullableFilter
  vatAccount: AccountWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input AccountOrderByInput {
  id: OrderDirection
  account: OrderDirection
  name: OrderDirection
  description: OrderDirection
  type: OrderDirection
  vatAmount: OrderDirection
}

input AccountUpdateInput {
  account: Int
  name: String
  description: String
  type: String
  vatAmount: Decimal
  vatAccount: AccountRelateToOneForUpdateInput
}

input AccountUpdateArgs {
  where: AccountWhereUniqueInput!
  data: AccountUpdateInput!
}

input AccountCreateInput {
  account: Int
  name: String
  description: String
  type: String
  vatAmount: Decimal
  vatAccount: AccountRelateToOneForCreateInput
}

type AccountingPeriod {
  id: ID!
  label: String
  organization: Organization
  accountChart: AccountChart
  startDate: CalendarDay
  endDate: CalendarDay
}

input AccountingPeriodWhereUniqueInput {
  id: ID
}

input AccountingPeriodWhereInput {
  AND: [AccountingPeriodWhereInput!]
  OR: [AccountingPeriodWhereInput!]
  NOT: [AccountingPeriodWhereInput!]
  id: IDFilter
  label: StringFilter
  organization: OrganizationWhereInput
  accountChart: AccountChartWhereInput
  startDate: CalendarDayNullableFilter
  endDate: CalendarDayNullableFilter
}

input AccountingPeriodOrderByInput {
  id: OrderDirection
  label: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
}

input AccountingPeriodUpdateInput {
  label: String
  organization: OrganizationRelateToOneForUpdateInput
  accountChart: AccountChartRelateToOneForUpdateInput
  startDate: CalendarDay
  endDate: CalendarDay
}

input AccountChartRelateToOneForUpdateInput {
  create: AccountChartCreateInput
  connect: AccountChartWhereUniqueInput
  disconnect: Boolean
}

input AccountingPeriodUpdateArgs {
  where: AccountingPeriodWhereUniqueInput!
  data: AccountingPeriodUpdateInput!
}

input AccountingPeriodCreateInput {
  label: String
  organization: OrganizationRelateToOneForCreateInput
  accountChart: AccountChartRelateToOneForCreateInput
  startDate: CalendarDay
  endDate: CalendarDay
}

input AccountChartRelateToOneForCreateInput {
  create: AccountChartCreateInput
  connect: AccountChartWhereUniqueInput
}

type Organization {
  id: ID!
  name: String
  addressStreet: String
  addressPostalCode: String
  addressCity: String
  addressCountry: String
  phone: String
  email: String
  website: String
  businessID: String
  vatNumber: String
  owner: User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input OrganizationWhereUniqueInput {
  id: ID
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
  id: IDFilter
  name: StringFilter
  addressStreet: StringFilter
  addressPostalCode: StringFilter
  addressCity: StringFilter
  addressCountry: StringFilter
  phone: StringFilter
  email: StringFilter
  website: StringFilter
  businessID: StringFilter
  vatNumber: StringFilter
  owner: UserWhereInput
  users: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input OrganizationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  addressStreet: OrderDirection
  addressPostalCode: OrderDirection
  addressCity: OrderDirection
  addressCountry: OrderDirection
  phone: OrderDirection
  email: OrderDirection
  website: OrderDirection
  businessID: OrderDirection
  vatNumber: OrderDirection
}

input OrganizationUpdateInput {
  name: String
  addressStreet: String
  addressPostalCode: String
  addressCity: String
  addressCountry: String
  phone: String
  email: String
  website: String
  businessID: String
  vatNumber: String
  owner: UserRelateToOneForUpdateInput
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input OrganizationUpdateArgs {
  where: OrganizationWhereUniqueInput!
  data: OrganizationUpdateInput!
}

input OrganizationCreateInput {
  name: String
  addressStreet: String
  addressPostalCode: String
  addressCity: String
  addressCountry: String
  phone: String
  email: String
  website: String
  businessID: String
  vatNumber: String
  owner: UserRelateToOneForCreateInput
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createEntry(data: EntryCreateInput!): Entry
  createEntries(data: [EntryCreateInput!]!): [Entry]
  updateEntry(where: EntryWhereUniqueInput!, data: EntryUpdateInput!): Entry
  updateEntries(data: [EntryUpdateArgs!]!): [Entry]
  deleteEntry(where: EntryWhereUniqueInput!): Entry
  deleteEntries(where: [EntryWhereUniqueInput!]!): [Entry]
  createLineItem(data: LineItemCreateInput!): LineItem
  createLineItems(data: [LineItemCreateInput!]!): [LineItem]
  updateLineItem(where: LineItemWhereUniqueInput!, data: LineItemUpdateInput!): LineItem
  updateLineItems(data: [LineItemUpdateArgs!]!): [LineItem]
  deleteLineItem(where: LineItemWhereUniqueInput!): LineItem
  deleteLineItems(where: [LineItemWhereUniqueInput!]!): [LineItem]
  createAttachment(data: AttachmentCreateInput!): Attachment
  createAttachments(data: [AttachmentCreateInput!]!): [Attachment]
  updateAttachment(where: AttachmentWhereUniqueInput!, data: AttachmentUpdateInput!): Attachment
  updateAttachments(data: [AttachmentUpdateArgs!]!): [Attachment]
  deleteAttachment(where: AttachmentWhereUniqueInput!): Attachment
  deleteAttachments(where: [AttachmentWhereUniqueInput!]!): [Attachment]
  createAccountChart(data: AccountChartCreateInput!): AccountChart
  createAccountCharts(data: [AccountChartCreateInput!]!): [AccountChart]
  updateAccountChart(where: AccountChartWhereUniqueInput!, data: AccountChartUpdateInput!): AccountChart
  updateAccountCharts(data: [AccountChartUpdateArgs!]!): [AccountChart]
  deleteAccountChart(where: AccountChartWhereUniqueInput!): AccountChart
  deleteAccountCharts(where: [AccountChartWhereUniqueInput!]!): [AccountChart]
  createAccount(data: AccountCreateInput!): Account
  createAccounts(data: [AccountCreateInput!]!): [Account]
  updateAccount(where: AccountWhereUniqueInput!, data: AccountUpdateInput!): Account
  updateAccounts(data: [AccountUpdateArgs!]!): [Account]
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteAccounts(where: [AccountWhereUniqueInput!]!): [Account]
  createAccountingPeriod(data: AccountingPeriodCreateInput!): AccountingPeriod
  createAccountingPeriods(data: [AccountingPeriodCreateInput!]!): [AccountingPeriod]
  updateAccountingPeriod(where: AccountingPeriodWhereUniqueInput!, data: AccountingPeriodUpdateInput!): AccountingPeriod
  updateAccountingPeriods(data: [AccountingPeriodUpdateArgs!]!): [AccountingPeriod]
  deleteAccountingPeriod(where: AccountingPeriodWhereUniqueInput!): AccountingPeriod
  deleteAccountingPeriods(where: [AccountingPeriodWhereUniqueInput!]!): [AccountingPeriod]
  createOrganization(data: OrganizationCreateInput!): Organization
  createOrganizations(data: [OrganizationCreateInput!]!): [Organization]
  updateOrganization(where: OrganizationWhereUniqueInput!, data: OrganizationUpdateInput!): Organization
  updateOrganizations(data: [OrganizationUpdateArgs!]!): [Organization]
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteOrganizations(where: [OrganizationWhereUniqueInput!]!): [Organization]
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  entries(where: EntryWhereInput! = {}, orderBy: [EntryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EntryWhereUniqueInput): [Entry!]
  entry(where: EntryWhereUniqueInput!): Entry
  entriesCount(where: EntryWhereInput! = {}): Int
  lineItems(where: LineItemWhereInput! = {}, orderBy: [LineItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LineItemWhereUniqueInput): [LineItem!]
  lineItem(where: LineItemWhereUniqueInput!): LineItem
  lineItemsCount(where: LineItemWhereInput! = {}): Int
  attachments(where: AttachmentWhereInput! = {}, orderBy: [AttachmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttachmentWhereUniqueInput): [Attachment!]
  attachment(where: AttachmentWhereUniqueInput!): Attachment
  attachmentsCount(where: AttachmentWhereInput! = {}): Int
  accountCharts(where: AccountChartWhereInput! = {}, orderBy: [AccountChartOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountChartWhereUniqueInput): [AccountChart!]
  accountChart(where: AccountChartWhereUniqueInput!): AccountChart
  accountChartsCount(where: AccountChartWhereInput! = {}): Int
  accounts(where: AccountWhereInput! = {}, orderBy: [AccountOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountWhereUniqueInput): [Account!]
  account(where: AccountWhereUniqueInput!): Account
  accountsCount(where: AccountWhereInput! = {}): Int
  accountingPeriods(where: AccountingPeriodWhereInput! = {}, orderBy: [AccountingPeriodOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountingPeriodWhereUniqueInput): [AccountingPeriod!]
  accountingPeriod(where: AccountingPeriodWhereUniqueInput!): AccountingPeriod
  accountingPeriodsCount(where: AccountingPeriodWhereInput! = {}): Int
  organizations(where: OrganizationWhereInput! = {}, orderBy: [OrganizationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationWhereUniqueInput): [Organization!]
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizationsCount(where: OrganizationWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
