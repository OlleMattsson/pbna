{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts"],
  "sourcesContent": ["import { config } from '@keystone-6/core';\nimport { lists } from './schema';\nimport { withAuth, session } from './auth';\n\nexport default \n//withAuth(\n  config({\n    server: {\n      cors: { \n        origin: [\n          'http://localhost:8080'\n        ], \n        credentials: true }\n    },\n    db: {\n      provider: 'postgresql',\n      url: \"postgres://pbna_pguser:pbna_pgpw@localhost/pbna_pgdb\", \n      //url: process.env.DATABASE_URL as string,\n      enableLogging: true,\n      idField: { kind: 'uuid' }\n    },\n    lists,\n    //session,\n    storage: {\n      journal_item_files: {\n        kind: 'local',\n        type: 'file',\n        generateUrl: path => `http://localhost:${process.env.PORT}/files${path}`,\n        serverRoute: {\n          path: '/files',\n        },\n        storagePath: 'public/files'\n      }\n    }\n  })\n//);\n", "import { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n  integer,\n  file,\n  calendarDay,\n  checkbox,\n  decimal\n} from '@keystone-6/core/fields';\n\n\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type { Lists } from '.keystone/types';\n\nexport const lists: Lists = {\n  \n  User: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n\n      email: text({\n        validation: { isRequired: true },\n        isIndexed: 'unique',\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n      \n      entries: relationship({ ref: 'Entry.createdBy', many: true }),\n\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: 'now' },\n        ui: { \n          createView: {\n            fieldMode: \"hidden\" \n          } \n        }\n      }),\n      role: select({\n        type: \"string\",\n        options: [\n          { label: 'Admin', value: 'admin' },\n          { label: 'User', value: 'user' },\n          { label: 'Owner', value: 'owner' },\n        ],\n        validation: { isRequired: true},\n        ui: { displayMode: 'select' }\n      }),\n      companies: relationship({\n        ref: \"Company\",\n        many: true,\n        ui: {\n          labelField: \"name\"\n        }\n      })      \n    },\n    ui: {\n      listView: {\n        initialColumns: [\"name\", \"email\", \"isAdmin\",\"createdAt\"]\n      }\n    }\n  }),\n\n\n  Entry: list({\n    access: allowAll,\n    fields: {\n      createdAt: timestamp({\n        defaultValue: { kind: 'now' },\n        validation: {isRequired: true},\n        ui: { \n          createView: {\n            fieldMode: \"hidden\" \n          } \n        }\n      }),\n\n      createdBy: relationship({\n        ref: \"User.entries\",\n        ui: {\n          hideCreate: true,\n        }\n      }),\n\n      entryId: integer({label: \"Entry Number\"}),\n      date: calendarDay({label: \"Transaction Date\"}),\n      description: text(),\n      lineItems: relationship({\n        ref: 'LineItem',\n        many: true,\n        ui: {\n          displayMode: 'cards',\n          cardFields: [\"account\", \"type\", \"amount\", \"description\"],\n          linkToItem: true,\n          removeMode: 'disconnect',\n          inlineCreate: { fields: [\"account\", \"type\", \"amount\", \"description\"] },\n          inlineEdit: { fields: [\"account\", \"type\", \"amount\", \"description\"] },\n          inlineConnect: true,        \n        }\n      }),\n      attachments: relationship({ \n        ref: 'Attachment', \n        many: true \n      }),\n\n    },\n    ui: {\n      label: \"Journal\",\n      listView: {\n        initialColumns: [\"entryId\", \"date\", \"description\"]\n      }\n    }\n  }),\n\n\n  LineItem: list({\n    access: allowAll,\n    ui: {\n      isHidden: false,\n      listView: {\n        initialColumns: [\"description\", \"account\", \"type\", \"amount\"]\n      }\n    },\n\n    // this is the fields for our Tag list\n    fields: {\n\n      // account id\n      account: relationship({\n        ref: 'Account',\n        ui: {\n          labelField: \"description\",\n        }\n      }),\n\n      // debit or credit\n      type: select({\n        type: \"string\",\n        options: [\n          { label: 'Debit', value: 'd' },\n          { label: 'Credit', value: 'c' },\n        ],\n        validation: { isRequired: true},\n        ui: { displayMode: 'radio' }\n      }),\n\n      amount: decimal({\n        scale: 2,\n        validation: { isRequired: true},\n      }),\n\n      description: text(),\n\n\n    },\n    \n  }),\n\n\n  Attachment :list({\n    access: allowAll,\n    fields: {\n      name: text(),\n      description: text(),\n      file: file({storage: \"journal_item_files\"})\n    }\n  }),\n\n  \n  Account: list({\n    access: allowAll,\n    ui: {\n      labelField: 'name',\n    },\n    fields: {\n      account: integer(),\n      type: select({\n        type: \"string\",\n        options: [\n          { label: 'Asset', value: '0' },\n          { label: 'Liability', value: '1' },\n          { label: 'VAT', value: '2' },\n          { label: 'IncomeStatement', value: '3' },\n          { label: 'Noop', value: '4' },\n        ],\n        validation: { isRequired: true},\n        ui: { displayMode: 'select' }\n      }),\n      name: text(),\n      description: text(),\n      vatAmount: decimal({\n        scale: 2,\n      }),\n      vatAccount: relationship({\n        ref: 'Account'\n      })\n    }\n  }),\n\n  Company: list({\n    access: allowAll,\n    fields: {\n      name: text(),\n      addressStreet: text(),\n      addressPostalCode: text(),\n      addressCity: text(),\n      addressCountry: text(),\n      phone: text(),\n      email: text(),\n      website: text(),\n      businessID: text(), // \"y-tuunus\", 1234567-8\n      vatNumber: text(), // // FI12345678\n      users: relationship({\n        ref: \"User\",\n        many: true,\n        ui: {\n          labelField: \"name\"\n        }\n      })\n    },\n    ui: {\n      labelField: 'name',\n    },\n  })\n};\n"],
  "mappings": "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",
  "names": ["import_core"]
}
