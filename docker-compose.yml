version: '3'

networks:
  default:
    name: pbna_network

volumes:
  pg-data:
  frontend-dist:

x-postgres-vars: &postgres-vars 
  POSTGRES_USER: pbna_pguser
  POSTGRES_PASSWORD: pbna_pgpw
  POSTGRES_DB: pbna_pgdb

services:

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      <<: *postgres-vars
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data

  redis:
    image: redis
    container_name: redis
    # use when backend is running in container
    expose:
      - 6379
    # used when backend is running locally
    ports:
      - "6379:6379" 

  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./certs:/etc/nginx/certs
      - frontend-dist:/usr/share/nginx/html
    ports:
      - "443:443"
    depends_on:
      - keystone
      - subs

  keystone:
    container_name: keystone
    build: 
      context: ./keystone
      dockerfile: keystone.Dockerfile
    command: npm run noop
    ports:
      - "3000:3000"
    expose:
      - 3000
    environment:
      <<: *postgres-vars
      PORT: 3000   
      NODE_ENV: development
      DATABASE_URL: postgres://pbna_pguser:pbna_pgpw@postgres/pbna_pgdb
      SESSION_SECRET: my-super-secure-secret-123456789012345
    volumes:
      - ./common:/code/common
      - ./keystone/hooks:/code/hooks        
      - ./keystone/configs:/code/configs     
      - ./keystone/helpers:/code/helpers     
    links:
      - redis      

  subs:
    container_name: subs
    build: 
      context: ./keystone
      dockerfile: keystone.Dockerfile
    ports:
      - "4000:4000"
    expose:
      - 4000
    environment:
      <<: *postgres-vars   
      PORT: 4000
      SESSION_SECRET: my-super-secure-secret-123456789012345
    volumes:
      - ./keystone/subscriptionService:/code/subscriptionService
      - ./keystone/configs:/code/configs
      - ./common:/code/common
      - ./keystone/hooks:/code/hooks        
    links:
      - redis
      - postgres    
    command: npm run noop


  llama:
    container_name: llama
    build: 
      context: ./node-llama
      dockerfile: node-llama.Dockerfile
    links:
      - redis
      - keystone
    volumes:
      - type: bind
        source: ./common
        target: /code/common
      - type: bind
        source: ./models
        target: /code/models           
      - type: bind
        source: ./node-llama/src
        target: /code/src        
    command: npm run dev    



  tesseract:
    container_name: tesseract
    build: 
      context: ./tesseract
      dockerfile: tesseract.Dockerfile
    links:
      - redis
      - keystone
    volumes:
      - ./common:/code/common
      - ./tesseract/src:/code/src
    # command: tail -f /dev/null
    command: npm run noop


  email-verifyer:
    container_name: email-verifyer
    build: 
      context: ./email-verifyer
      dockerfile: email-verifyer.Dockerfile
    links:
      - redis
      - keystone
    volumes:
      - ./common:/code/common
      - ./email-verifyer/src:/code/src
      - ~/.aws:/root/.aws
    environment:
      - AWS_PROFILE=pbna
    command: sh -c "npm run build && tail -f /dev/null"  # keep container alive


  react-admin:
    container_name: react-admin
    build: 
      context: ./react-admin
      dockerfile: react-admin.Dockerfile
    volumes:
      - ./react-admin/src:/code/src
      - frontend-dist:/code/dist  # assuming your app builds into /app/dist
    command: npm run noop
    ports:
      - "5173:5173"
    expose:
      - 5173    

